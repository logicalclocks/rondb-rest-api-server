// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: internal/grpcsrv/rdrs.proto

package grpcsrv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RonDBRestServerClient is the client API for RonDBRestServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RonDBRestServerClient interface {
	PKRead(ctx context.Context, in *PKReadRequestProto, opts ...grpc.CallOption) (*PKReadResponseProto, error)
	Batch(ctx context.Context, in *BatchRequestProto, opts ...grpc.CallOption) (*BatchResponseProto, error)
	Stat(ctx context.Context, in *StatRequestProto, opts ...grpc.CallOption) (*StatResponseProto, error)
}

type ronDBRestServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRonDBRestServerClient(cc grpc.ClientConnInterface) RonDBRestServerClient {
	return &ronDBRestServerClient{cc}
}

func (c *ronDBRestServerClient) PKRead(ctx context.Context, in *PKReadRequestProto, opts ...grpc.CallOption) (*PKReadResponseProto, error) {
	out := new(PKReadResponseProto)
	err := c.cc.Invoke(ctx, "/RonDBRestServer/PKRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ronDBRestServerClient) Batch(ctx context.Context, in *BatchRequestProto, opts ...grpc.CallOption) (*BatchResponseProto, error) {
	out := new(BatchResponseProto)
	err := c.cc.Invoke(ctx, "/RonDBRestServer/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ronDBRestServerClient) Stat(ctx context.Context, in *StatRequestProto, opts ...grpc.CallOption) (*StatResponseProto, error) {
	out := new(StatResponseProto)
	err := c.cc.Invoke(ctx, "/RonDBRestServer/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RonDBRestServerServer is the server API for RonDBRestServer service.
// All implementations must embed UnimplementedRonDBRestServerServer
// for forward compatibility
type RonDBRestServerServer interface {
	PKRead(context.Context, *PKReadRequestProto) (*PKReadResponseProto, error)
	Batch(context.Context, *BatchRequestProto) (*BatchResponseProto, error)
	Stat(context.Context, *StatRequestProto) (*StatResponseProto, error)
	mustEmbedUnimplementedRonDBRestServerServer()
}

// UnimplementedRonDBRestServerServer must be embedded to have forward compatible implementations.
type UnimplementedRonDBRestServerServer struct {
}

func (UnimplementedRonDBRestServerServer) PKRead(context.Context, *PKReadRequestProto) (*PKReadResponseProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKRead not implemented")
}
func (UnimplementedRonDBRestServerServer) Batch(context.Context, *BatchRequestProto) (*BatchResponseProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedRonDBRestServerServer) Stat(context.Context, *StatRequestProto) (*StatResponseProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedRonDBRestServerServer) mustEmbedUnimplementedRonDBRestServerServer() {}

// UnsafeRonDBRestServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RonDBRestServerServer will
// result in compilation errors.
type UnsafeRonDBRestServerServer interface {
	mustEmbedUnimplementedRonDBRestServerServer()
}

func RegisterRonDBRestServerServer(s grpc.ServiceRegistrar, srv RonDBRestServerServer) {
	s.RegisterService(&RonDBRestServer_ServiceDesc, srv)
}

func _RonDBRestServer_PKRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKReadRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RonDBRestServerServer).PKRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RonDBRestServer/PKRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RonDBRestServerServer).PKRead(ctx, req.(*PKReadRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RonDBRestServer_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RonDBRestServerServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RonDBRestServer/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RonDBRestServerServer).Batch(ctx, req.(*BatchRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RonDBRestServer_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RonDBRestServerServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RonDBRestServer/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RonDBRestServerServer).Stat(ctx, req.(*StatRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

// RonDBRestServer_ServiceDesc is the grpc.ServiceDesc for RonDBRestServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RonDBRestServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RonDBRestServer",
	HandlerType: (*RonDBRestServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PKRead",
			Handler:    _RonDBRestServer_PKRead_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _RonDBRestServer_Batch_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _RonDBRestServer_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpcsrv/rdrs.proto",
}
